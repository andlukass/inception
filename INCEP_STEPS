1* do the 1st bonus *THIS WILL HELP YOU DURING THE CONFIGURATION*

2* install docker engine:
install certificates so we can acess https
sudo apt-get install ca-certificates curl gnupg lsb-release

get the security key of docker images and install on our system
wget https://download.docker.com/linux/debian/gpg
sudo apt-key add gpg

get the sources of docker to our apt
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update

install docker cli
sudo apt install docker-ce docker-ce-cli containerd.io

init docker
sudo systemctl start docker
sudo systemctl enable docker

sudo apt install docker-compose /// so you can use the docker-compose.yml


3* create the docker image with nginx
create a key and certificate so we can use ssl(tsl1.2) on our server.

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.key -out cert.crt

we'll keep this two files in the srcs/requirements/ssl
after in the dockerfile we'll copy it to the docker container

you can test if the tls1.2
openssl s_client -connect <IP_ADRESS>:<SSL_PORT> -tls1_2

4* create the docker image with mariadb
create a directory /home/<YOR_LOGIN>/data/database
it ill be used as the mariadb data directory


5* create the docker image with wordpress


BONUS 
1* INSTALL SSH (TO USE ON YOUR NORMAL PC)
change the network confg on you Virtual Box to brigde
apt install openssh-server//it will open the port 22
check your ip with: "ip addr show" // usually its the one starting with 10.***
in your real computer you can log ssh with: "ssh <your_user>@<VM_ipadress> -p 22"
you can also install a extention on your vscode (Remore - SSH) to connect in your VM trough vscode, 
so you can edit your files easier

COMANDOS UTEIS:-------------------------------------------------*

docker exet -it srcs_incep_wordpress_1 bash

docker stop srcs_incep_wordpress_1
docker rm srcs_incep_wordpress_1
docker rmi incep_wordpress
make


docker stop $(docker ps -q); docker rm $(docker ps -aq) ; docker rmi incep_wordpress

docker build -t incep_wordpress:latest . ; docker run incep_wordpress

ss -tuln // portas ativas

build a docker image:
	docker build -t <create_a_name>:latest <Dockerfile_Dir> /// the '-t' allow you to give the image a name

list docker images:
	docker images

remove docker images:
	docker rmi <IMAGE_ID>

run a container from a image:
	docker run -d  <IMAGE_ID> //// the '-d' makes it run in background, so it doest freeze your terminal

list all running containers:
	docker ps -a /// the '-a' list even stopped containers

enter into a running container:
	docker exec -it <CONTAINER_ID> bash

stop a container:
	docker stop  <CONTAINER_ID>

remove a container:
	docker rm  <CONTAINER_ID>
